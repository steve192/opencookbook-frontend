name: Build and publish
on:
  push:
    branches: [main]
    # Publish semver tags as releases.
    tags: ["v*.*.*"]
  release:
    types: [published]
  pull_request:
    types: [opened, synchronize, reopened]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-web:
    name: BuildWeb
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: cache node modules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Set version
        run: |
          REF_TYPE="${{github.ref_type}}"
          if [[ "$REF_TYPE" == "tag" ]]; then
            sudo apt update && sudo apt install jq
            TAG=${{  github.ref_name }}
            TAG=${TAG#v}
            echo $TAG
            jq '.version = "'"$TAG"'"' "package.json" > temp.json && mv temp.json "package.json"
            jq '.expo.version = "'"$TAG"'"' "app.json" > apptemp.json && mv apptemp.json "app.json"
          fi

      - name: install dependencies and build
        run: |
          npm ci
          npm run build-web

      - uses: actions/upload-artifact@master
        with:
          name: dist
          path: dist/

  # cypress-percy:
  #   name: cypress-percy
  #   needs:
  #     - build-web
  #   runs-on: ubuntu-latest
  #   # Run only on main branch
  #   if: github.event_name != 'pull_request' && ( github.ref_protected == true )
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: cache node modules
  #       uses: actions/cache@v4
  #       env:
  #         cache-name: cache-node-modules
  #       with:
  #         # npm cache files are stored in `~/.npm` on Linux/macOS
  #         path: ~/.npm
  #         key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-build-${{ env.cache-name }}-
  #           ${{ runner.os }}-build-
  #           ${{ runner.os }}-

  #     - uses: actions/download-artifact@master
  #       with:
  #         name: dist
  #         path: dist/

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Extract Docker metadata
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

  #     - name: Build docker image for cypress tests
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         push: false
  #         load: true
  #         tags: ${{ env.IMAGE_NAME }}:cypresstest
  #         labels: ${{ steps.meta.outputs.labels }}

  #     - name: Cypress run
  #       uses: cypress-io/github-action@v6
  #       with:
  #         start: docker run --rm -p 80:80 ${{ env.IMAGE_NAME }}:cypresstest
  #         command-prefix: percy exec -- npx
  #         config: baseUrl=http://localhost:80
  #       env:
  #         PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}

  # cypress:
  #   name: cypress
  #   needs:
  #     - build-web
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: cache node modules
  #       uses: actions/cache@v4
  #       env:
  #         cache-name: cache-node-modules
  #       with:
  #         # npm cache files are stored in `~/.npm` on Linux/macOS
  #         path: ~/.npm
  #         key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-build-${{ env.cache-name }}-
  #           ${{ runner.os }}-build-
  #           ${{ runner.os }}-

  #     - uses: actions/download-artifact@master
  #       with:
  #         name: dist
  #         path: dist/

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Extract Docker metadata
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

  #     - name: Build docker image for cypress tests
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         push: false
  #         load: true
  #         tags: ${{ env.IMAGE_NAME }}:cypresstest
  #         labels: ${{ steps.meta.outputs.labels }}

  #     - name: Cypress run
  #       uses: cypress-io/github-action@v6
  #       with:
  #         start: docker run --rm -p 80:80 ${{ env.IMAGE_NAME }}:cypresstest
  #         config: baseUrl=http://localhost:80

  #     - name: "Upload Artifact"
  #       if: failure()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: cypress-screenshots
  #         path: cypress/screenshots/**/*
  #         retention-days: 5

  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: cache node modules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: install dependencies
        run: |
          npm ci

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  docker:
    name: BuildDocker
    needs:
      - build-web
      # - cypress
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/download-artifact@master
        with:
          name: dist
          path: dist/

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      #- name: Install cosign
      #  if: github.event_name != 'pull_request' && ( github.ref_protected == true || github.ref_type == 'tag' )
      #  uses: sigstore/cosign-installer@1e95c1de343b5b0c23352d6417ee3e48d5bcd422
      #  with:
      #    cosign-release: "v1.4.0"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' && ( github.ref_protected == true || github.ref_type == 'tag' ) }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      #- name: Sign the published Docker image
      #  if: ${{ github.event_name != 'pull_request' && ( github.ref_protected == true || github.ref_type == 'tag' ) }}
      #  env:
      #    COSIGN_EXPERIMENTAL: "true"
      #  # This step uses the identity token to provision an ephemeral certificate
      #  # against the sigstore community Fulcio instance.
      #  run: cosign sign ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}

  # Publish everything on main branch to expo (TODO: as soon as semantic versions are introduced, only release to beta release channel)
  expo-publish:
    name: Publish on expo
    needs:
      - sonarcloud
      # - cypress
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && ( github.ref_type == 'tag' )
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: cache node modules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Set version
        run: |
          REF_TYPE="${{github.ref_type}}"
          if [[ "$REF_TYPE" == "tag" ]]; then
            sudo apt update && sudo apt install jq
            TAG=${{  github.ref_name }}
            TAG=${TAG#v}
            echo $TAG
            jq '.version = "'"$TAG"'"' "package.json" > temp.json && mv temp.json "package.json"
            jq '.expo.version = "'"$TAG"'"' "app.json" > apptemp.json && mv apptemp.json "app.json"
          fi

      - name: Install dependencies
        run: npm ci

      - name: publish to expo beta
        run: npm run publish-expo-production
        env:
          DEFAULT_API_URL: https://beta.cookpal.io
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
